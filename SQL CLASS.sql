
select left("nikhil kumar",4);
select right("nikhil kumar",4);

#date and time function

select NOW();

SELECT current_date();
SELECT curdate();
SELECT current_time();
SELECT curtime();

select("2024-05-25");

#EXTRACT THE NAME OF MONTH
SELECT monthname(NOW())AS MONTH_NAME;

#EXTRACT THE QUARTER
SELECT quarter(NOW());

#EXTRACT THE DAY NUMBER
SELECT DAY(now());

#EXTARCT WEEK NUMBER
SELECT WEEK(now());

#EXTRACT YEAR 
SELECT year(now());

# HOW TO CREATE A DATABASE

CREATE DATABASE BRILLICA;
DROP DATABASE BRILLICA;

SHOW DATABASES;

#HOW TO CREATE TABLE
USE BRILLICA;
CREATE TABLE STUDENT(SI_NO int,ST_NAME varchar(255),AGE int, SALARY FLOAT);

SELECT SI_NO,ST_NAME,AGE,SALARY FROM STUDENT;

SELECT * FROM STUDENT;

INSERT INTO STUDENT(SI_NO,ST_NAME,AGE,SALARY)
VALUES(100,"SARTHAK",22,20000),
(101,"NIKHIL",22,20000);
select * FROM STUDENT;
DROP table STUDENT;

USE BRILLICA;

SELECT * FROM EMP;

# WHERE CLAUSE:- IT IS USED TO FILTER THE DATA. 

# SHOW THE TOTAL EMPLOYEE OF PATNA
SELECT EMP_NAME,AGE,CITY,DEPARTMENT FROM EMP;

SELECT * FROM EMP WHERE CITY= "PATNA";

SELECT EMP_NAME,AGE,CITY,DEPARTMENT FROM EMP;
SELECT * FROM EMP WHERE CITY= "NOIDA";

# WRITE A QUERY TO SHOW THE ALL EMPLOYEE OF DATA ANALYST. 
SELECT * FROM EMP WHERE DEPARTMENT="DATA ANALYST";
# WRITE A QUERY TO SHOW THE ALL EMPLOYEEE WHOSE AGE IS 30
SELECT * FROM EMP WHERE AGE = 30;
# WRITE A QUERY TO SHOW THE DETAILS WHOSE DEPARTMENT IS MIS ANALYST
SELECT * FROM EMP  WHERE DEPARTMENT="MIS ANALYST";

#OPERATORS
#AIRTHMATTIC OPERATORS
#COMPERISION OPERATORS :- [> < = <> >= <=]
#>  :- GREATER THAN
#<  :- LESS THAN
#>= :- GREATER THAN EQUAL TO 
#<= :- LESS THAN EQUAL TO
#=  :- EQUAL TO
#<> :- NOT EQUAL TO

# SHOW THE DATA WHOSE AGE IS LESS THAN 25

SELECT * FROM EMP WHERE AGE < 25;

# SHOW THE EMPLOYEE WHOSE SALARY IS GREATER THAN 65K
SELECT * FROM EMP WHERE SALARY > 65000;


# LOGICAL OPERATORS
# AND :- ITS SHOW DATA WHEN ALL CONDITION IS TRUE
# OR :- HERE AT LEAST ONE CONDITION SHOULD BE TRUE
# BETWEEN :- IT IS USED TO SHOW THE VALUES BETWEEN TWO NUMBER

SELECT * FROM EMP WHERE CITY= "PATNA" AND DEPARTMENT = "DATA ANALYST";  

SELECT * FROM EMP WHERE CITY = "PATNA" OR  CITY= "NOIDA";

SELECT * FROM EMP WHERE AGE BETWEEN 20 AND 30;
 #_________________________________________________________________________________________________________________________
USE BRILLICA;
select * from emp;

#SHOW THE DATA WHOSE SALARY BETWEEN 20K TO 30K AND AGE BETWEEN 25 TO 30 IN DATA ANALYST
SELECT * FROM EMP WHERE SALARY BETWEEN 20000 AND 30000 AND AGE BETWEEN 25 AND 30 AND DEPARTMENT = "DATA ANALYST";

#WRITE A QUERY TO SHOW THE DATA WHOSE DEPARTMENT IS DATA ANALYST AND DATA SCIENTIST
SELECT *FROM EMP  WHERE DEPARTMENT= "DATA ANALYST" OR DEPARTMENT ="DATA SCIENTIST";

# SHOW THE DATA WHOSE DEPARTMENT IS MIS ANALYST AND AGE BETWEEN 35 TO 40
SELECT *FROM EMP WHERE DEPARTMENT= "MIS ANALYST" AND AGE BETWEEN 35 AND 40;

# WRITE A QUERY TO FETCH THE DATA WHOSE CITY IS PATNA AND NOIDA AND AGE IS LESS THAN 30
SELECT * FROM EMP WHERE CITY= "PATNA"AND AGE < 30 OR CITY="NOIDA" AND AGE < 30;

#WRITE A QUERY TO SHOW THE DATA WHOSE NAME OF LENGTH IS LESS THAN 10
#SELECT *FROM EMP WHERE length("EMP NAME");

#SHOW THE NAME ONLY WHOSE NAME STARTSWITH "A"
#SELECT *FROM EMP 

#SHOW THE DATA WHOSE SALARY BETWEEN 20K TO 30K AND AGE BETWEEN 25 TO 30 IN DATA ANALYST
SELECT *FROM EMP WHERE SALARY BETWEEN 20000 AND 30000 AND AGE BETWEEN 25 AND 30 AND DEPARTMENT= "DATA ANALYST";

#SHOW DATA OF ALL EMPLOYEE BUT EXCLUDE TWO DEPARTMENT "DATA SCIENTIST" AND "DATA ANALYST"
#SELECT *FROM EMP WHERE 

#SHOW THE DATA WHOSE CITY IS PATNA ,NOIDA AND DELHI
SELECT *FROM EMP WHERE CITY="DELHI" OR CITY="PATNA" OR CITY="NOIDA";

#SHOW THE DETAILS OF EMPLOYEE WHOSE AGE IS LESS THEN 23
SELECT *FROM EMP WHERE AGE < 23;

# WRITE A QUERY TO COMBINE THREE COLUMN WITH SEPERATOR (",")
# COLUMN SHOULD BE EMP_NAME,AGE, AND SALARY

# WRITE A QUERY TO FETCH THE DATA OF EMPLOYEE WHERE DEPARTMENT IS NOT GIVEN ?

# SHOW THE DATA WHERE DEPARTMENT IS GIVEN

use brillica;
select *from emp ;

#create a column of mask
alter table emp add column mask text;
# delete description column from emp 
alter table emp drop column description;

select * from emp;


#UPDATE :- IT IS USED TO ADD THE VALUE IN PARTICULAR CELL ACCORDING  TO CONDITION

SELECT *FROM EMP;
 UPDATE EMP  SET EMP_NAME = "RAMAN SINGH" WHERE SI_NO=1001;
 -- -----------------------
 SET SQL_SAFE_UPDATES=0;
 
-- -------------------------
SELECT * FROM EMP;

#ADD CONTACT NUMBER WITH MASKED LIKE :-XXXXXX2345

ALTER TABLE EMP ADD COLUMN mask TEXT;

SELECT *FROM EMP;

SELECT CONCAT("XXXXXX",RIGHT(`CONTACT NUMBER`,4)) AS MASK from EMP;

#UPDATE EMP SET MASK = CONCAT("XXXXXX",RIGHT(#CONTACT NUMBER,4));


SELECT *FROM EMP;

#REPLACE VALUE "ANALYST" AT THE PLACE OF BLANK CELL

UPDATE EMP SET DEPARTMENT = "ANALYST" WHERE DEPARTMENT = "";

#REMOVING THE EXTRA SPACE FROM THE COLUMNS
UPDATE EMP SET EMP_NAME = TRIM(EMP_NAME);

SELECT *FROM EMP;

#CREATE A COLUMN OF STATUS IN DATASET
-- AND ADD THE VALUES YES IF AGE IS GREATER THAN 40
-- ELSE PRINT NO

ALTER TABLE EMP ADD COLUMN STATUS TEXT;
SELECT *FROM EMP;

UPDATE EMP SET STATUS="YES" WHERE AGE>40;
UPDATE EMP SET STATUS = "NO" WHERE STATUS IS NULL;
SELECT* FROM EMP;


# HOW TO CREATE A DUPLICATE TABLE IN SQL

CREATE TABLE EMP2 AS(
SELECT EMP_NAME,AGE,DEPARTMENT,CITY FROM EMP);
SELECT *FROM EMP2;

#CREATE TWO COLUMN OF FIRST_NAME AND LAST_NAME 

ALTER TABLE EMP2 ADD COLUMN FIRST_NAME TEXT;
ALTER TABLE EMP2 ADD COLUMN LAST_NAME TEXT;
SELECT *FROM EMP2;

ALTER TABLE EMP2 ADD COLUMN FIRST_NAME TEXT AFTER EMP_NAME;

SELECT EMP_NAME,
LEFT(EMP_NAME,INSTR(EMP_NAME," ")) AS FIRST_NAME
FROM EMP2;

UPDATE EMP2 SET FIRST_NAME =LEFT(EMP_NAME,INSTR(EMP_NAME," "));
UPDATE EMP2 SET LAST_NAME = RIGHT(EMP_NAME,LENGTH(EMP_NAME)-INSTR(EMP_NAME," "));

#FETCH TOP 5 ROWS
DELETE FROM EMP LIMIT 5;
SELECT *FROM EMP;

DELETE FROM EMP WHERE CITY = " JAIPUR ";
SELECT *FROM EMP WHERE CITY = "JAIPUR";

USE BRILLICA;
SELECT *FROM EMP;

#MEMBERSHIP OPERATORS
#SHOW THE DATA WHOSE CITY IS PATNA NOIDA AND JAIPUR
-- IN :-
-- NOT IN :-
SELECT *FROM EMP WHERE 
CITY = "PATNA" OR CITY = "NOIDA" OR CITY = "JAIPUR";
SELECT *FROM EMP WHERE CITY IN ("PATNA","NOIDA","JAIPUR");
SELECT *FROM EMP WHERE CITY NOT IN ("PATNA","NOIDA","JAIPUR");


USE BRILLICA;
SELECT *FROM EMP;
SELECT *FROM EMP2;
#-----------------------------------

#GROUP BY :- IT IS USED TO ANALYSE THE LARGE AMOUNT OF DATA IN EASY MANNER WITH THE HELP OF THE AGGRIGATE FUNCTION. 

USE BRILLICA;
SELECT *FROM EMP;

# COUNT TOTAL NUMBER OF EMPLOYEE IN DATA ANALYST
SELECT COUNT(*) FROM EMP WHERE DEPARTMENT = "DATA ANALYST";

# FIND THE AVERAGE SALARY OF DATA SCIENTIST
SELECT AVG(SALARY) FROM EMP WHERE DEPARTMENT = "DATA SCIENTIST";

# FIND THE MINIMUM SALARY OF MIS ANALYST
SELECT MIN(SALARY) FROM EMP WHERE DEPARTMENT ="MIS ANALYST";

# SHOW THE MAXIMUM AGE OF EMPLOYEE WHO LIVES IN NOIDA
SELECT MAX(AGE) FROM EMP WHERE CITY ="NOIDA";

SELECT *FROM EMP;

#COUNT TOTAL NUMBER OF EMPLOYEE IN EACH DEPARTMENT
SELECT DEPARTMENT,COUNT(*) FROM EMP
				GROUP BY DEPARTMENT;
                
		
#1. COUNT TOTAL NUMBER OF EMPLOYEE IN EACH CITY
SELECT CITY,COUNT(*) FROM EMP
                 GROUP BY CITY;

#2. FIND THE AVERAGE SALARY IN EACH DEPARTMENT
SELECT DEPARTMENT,AVG(SALARY) FROM EMP
                  GROUP BY DEPARTMENT;
                  
#3. FIND THE MAXIMUM SALARY IN EACH DEPARTMENT
SELECT DEPARTMENT,MAX(SALARY) FROM EMP GROUP BY DEPARTMENT;
                  

#4. SHOW THE MINIMUM AGE IN EACH CITY
SELECT CITY,MIN(AGE) FROM EMP GROUP BY CITY;
            
            
#5. SHOW THE AVERAGE AGE OF EMPLOYEE IN EACH DEPARTMENT
SELECT DEPARTMENT,AVG(AGE) FROM EMP GROUP BY DEPARTMENT; 

USE BRILLICA;
SELECT *FROM WORKERS;

DESCRIBE WORKERS;
SELECT *FROM WORKERS;

#1. COUNT TOTAL NUMBER LABOR IN EACH DISTRICT
SELECT DISTRICT,COUNT(*) FROM WORKERS GROUP BY DISTRICT;

#2. SHOW THW SUM OF LABOR COST IN EACH DISTRICT
SELECT DISTRICT,SUM(LBRCOST) AS COST FROM WORKERS GROUP BY DISTRICT;

#3. SHOW THE AVERAGE LABOR FEE IN EACH SERVICE
SELECT SERVICE,AVG(LBRFEE) AS FEE FROM WORKERS GROUP BY SERVICE;

# GROUP BY
# HAVING CLUASE
# ORDER BY
# LIMIT
# CASE


USE BRILLICA;
SELECT *FROM EMP;

#1. FIND THE TOTAL NUMBER OF EMPLOYEE IN EACH DEPARTMENT AND SORT IN ASCENDING ORDER
SELECT DEPARTMENT,COUNT(*) AS EMP FROM EMP
                 GROUP BY DEPARTMENT ORDER BY EMP;
				
# HAVING CLAUSE:- HAVING CLAUSE ARE USED TO FILTER THE DATA AFTER THE GROUP BY 
SELECT CITY,MIN(AGE) AS MIN_AGE FROM EMP 
                      GROUP BY CITY HAVING MIN_AGE;
                      
                      
                      
#1. FIND THE AVERAGE SALARY OF DEPARTMENT WITH AN AVERAGE SALARY GREATER THAN 45K
SELECT DEPARTMENT,AVG(SALARY) AS AVG_SAL FROM EMP
                 GROUP BY DEPARTMENT HAVING AVG_SAL>45000;
                 
#2. FIND THE MAXIMUM AGE OF EACH DEPARTMENT WHICH MAXIMUM AGE IS LESS THAN 60
SELECT DEPARTMENT,MAX(AGE) AS MAX_AGE FROM EMP GROUP BY DEPARTMENT HAVING MAX_AGE<60;

#3. FIND THE MINIMUM SALARY OF EACH CITY WHICH MINIMUM SALARY GREATER THAN 25K
SELECT CITY,MIN(SALARY) AS MIN_SAL FROM EMP GROUP BY CITY HAVING MIN_SAL>25000;

USE BRILLICA;
SELECT *FROM COVID_DATA;
DESCRIBE COVID_DATA;


#1. FIND TOP 5 TOTAL COMFIRMED CASE IN EACH COUNTRY
SELECT COUNTRY, SUM(CONFIRMED) AS TOTAL_CONFIRMED FROM COVID_DATA
                            GROUP BY COUNTRY ORDER BY TOTAL_CONFIRMED DESC LIMIT 5;
                            
#2. FIND THE TOP 10 COUNTRY BY ACTIVE CASE
SELECT COUNTRY, SUM(ACTIVE) AS TOTAL_ACTIVE FROM COVID_DATA
							GROUP BY COUNTRY ORDER BY TOTAL_ACTIVE DESC LIMIT 10;

#3. SHOW THE MONTHS BY TOTAL CONFIRMED CASE
SELECT MONTHNAME(DATE) AS MNTH, SUM(CONFIRMED) AS CNF
                      FROM COVID_DATA GROUP BY MNTH ORDER BY CNF;
                      

#4. COUNT TOTAL NUMBER OF COUNTRY IN EACH WHO REGION
 SELECT 'WHO REGION' , COUNT(DISTINCT COUNTRY) AS TOTAL_COUNTRY FROM COVID_DATA
                           GROUP BY 'WHO REGION' ORDER BY TOTAL_COUNTRY DESC;



                   






#------------------------------------------------------------------------------------------------------------------------------


# CONSTARAINTS :- IT IS USED TO APPLY THE RULE RESTRICTION ON TABLE. 

#1. UNIQUE:- IT IS USED  TO INSERT THE ALL UNIQUE VALUE IN A COLUMN. 
--			OR  ITS RESTRICT THE DUPLICATE VALUE.

#2. NOT NULL:- IT IS USED TO RESTRICT THE NULL VALUES. 
--          OR  ITS SAFE THE DATE FROM THE NULL VALUES.

#3. CHECK:- IT IS USED TO SPECIFY THE CONDITION IN COLUMN TO IF CONDITION IS TRUE THEN YOU CAN INSERT THE DATA ESLE THROUGH ERROR.
--        OR  IT IS USED TO APPLY THE LIMITATION OVER THE DATA. 
 
#4. DEFAULT:- IT IS USED TO SET THE VALUES  IN A COLUMN. 

#5. PRIMERY KEY:- PRIMERY KEY IS THE COMBINATION OF UNIQUE  AND NOT NULL. 

#6. FORGIEN KEY:- IT IS USED TO CREATE REFERENCE BETWEEN TWO OR MORE THAN TWO TABLE. 

#7. ENUM:- IT IS USED TO FIX THE VALUES IN A COLUMN. 


#--------------------------------------------------------------------------------------------------------------------------------------------------------------
USE BRILLICA;

CREATE TABLE PKS(
EMP_ID INT PRIMARY KEY,
EMP_NAME VARCHAR(255)  NOT NULL,
AGE int check(age > 18),
salary float not null,
city varchar(200) default "delhi",
dept enum("DA" , "DS" , "MIS" )
);

SELECT *FROM PKS;
INSERT INTO PKS(EMP_ID, EMP_NAME, AGE, SALARY, CITY, DEPT)
 VALUES (100,"SANDEEP",45,45567,"NOIDA","DS");
 
 SELECT *FROM PKS;

INSERT INTO PKS(EMP_ID, EMP_NAME, AGE, SALARY, CITY, DEPT)
 VALUES (101,"VIRAT",35,35567,"DELHI","DA");
 
 #-----------------------------------------------------------------------------------------------------------------
 
 SELECT *FROM EMP;
 
#1. COUNT TOTAL NUMBER OF CITY IN EACH DEPARTMENT AND SHOW HIS NAME. 
SELECT DEPARTMENT , COUNT(DISTINCT CITY) AS COUNTS,
GROUP_CONCAT(DISTINCT CITY) AS CITY_NAME
FROM EMP
GROUP BY DEPARTMENT;

#2. FIND THE AVERAGE AGE MAXIMUM AGE IN EACH DEPARTMENT AND CITY.
SELECT DEPARTMENT,CITY ,MAX(AGE) AS MAX_AGE, AVG(AGE) AS AVG_AGE
FROM EMP GROUP BY DEPARTMENT,CITY ORDER BY DEPARTMENT,MAX_AGE DESC;

#3. SHOW THE TOP 3 MAX AGE OF EMPLOYEE IN EACH DEPARTMENT.
SELECT DEPARTMENT ,MAX(AGE) AS MAX_AGE FROM EMP GROUP BY DEPARTMENT
ORDER BY MAX_AGE  DESC LIMIT 3;

#4. SHOW THE TOTAL NUMBER OF EMPLOYEE AND MAXIMUM AGE 
#  AND FILTER WHOSE AGE IS GREATER THAN 50 BY CITY
SELECT CITY,MAX(AGE) AS MXA,COUNT(*) AS TNE
FROM EMP GROUP BY CITY HAVING MXA > 62;


#------------------------------------------------------------------------------------------------------------------------------------------------------------
#                                                          JOINS
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# JOIN:- A JOIN CLAUSE IS USED TO  COMBINED ROWS FROM TWO OR MORE TABLES , BASED ON A RELATED COLUMN BETWEEN THEM. 
 --  OR MY SQL JOINS ARE USD WUTH SELECT  STATMENTS. ITS USED TO RETRIEVE DATA FROM MULTIPLE TABLES IT IS PERFROMED WHENEVER YOU NEED TO FETCH RECORDS FROM YWO OR MORE TABLES.
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# TYPES OF JOIN:-  1. INNER JOIN 
--                 2. LEFT JOIN
--                 3. RIGHT JOIN 
--                 4. FULL JOIN
--                 5. SELF JOIN 
--                 6. NATURAL JOIN
--                 7. CROSS JOIN


#1. INNER JOIN - THE INNER JOIN KEYWORD SELECTS RECORDS THAT HAVE MATCHING VALUES IN BOTH TABLES. 
--  OR         - IT IS USED TO  COMBINED THE COMMON ROWS FROM THE TWO OR MORE THAN TWO TABLE.

#2. LEFT JOIN -  THE LEFT JOIN KEYWORD RETURNS ALL RECORDS FROM THE LEFT TABLE (T1), AND THE MATCHING RECORDS FROM THE RIGHT TABLE (T2).
--  OR        -  LEFT JOINS IN  SQL IS USED TO COMBINED ROWS FROM TWO OR MORE THAN TABLES, BASE ON A RELATED COLUMN BETWEEN THEM. IT RETURNS ALL ROWS FROM THE LEFT TABLE AND MATCHING RECORDS FROM THE RIGHT TABLE. 

#3. RIGHT JOIN - THE RIGHT KEYWORD RETURNS FROM THE RIGHT TABLE (T2). AND THE MATCHING RECORDS FROM THE LEFT TABLE (T2).
--  OR       - RIGHT JOIN ARE USED TO COMBINE ALL MATCHING ROWS FROM RIGHT TABLE.

--   NOTE :- IN  SOME DATABASE RIGHT JOIN IS CALLED RIGHT OUTER JOIN.

#4. FULL JOIN- THE FULL JOIN KEYWORD RETURNS ALL RECORDS WHEN THERE IS A MATCH IN LEFT (T1) OR RIGHT (T2) TABLE RECORDS.
--  OR     -  FULL JOIN IN SQL COMBINES ROWS FROM BOTH TABLES I.E. LEFT AND RIGHT TABLE WHEN THERE IS A MATCH IN  EITHER OF THE TABLE.
--         - FULL JOIN CAN BE CONSIDERD AS THE COMBINATON OF LEFT JOIN AND RIGHT JOIN.

-- TIP  - FULL OUER JOIN AND FULL JOIN ARE THE SAME. 

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRILLICA;
SELECT *FROM FIRST;
SELECT *FROM SECOND;

# INNER JOIN 
SELECT EMP_NAME,SALARY,FIRST.DEP_ID,DEPARTMENT
 FROM FIRST INNER JOIN SECOND ON  FIRST.DEP_ID=SECOND.DEP_ID;
 
 # LEFT JOIN
 SELECT EMP_NAME,SALARY,FIRST.DEP_ID,DEPARTMENT
  FROM FIRST LEFT JOIN SECOND ON FIRST.DEP_ID=SECOND.DEP_ID;
 
 -- --------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 use brillica;
 select *from zomato;
 select *from COUNTRYCODE;
 
 SELECT *FROM WORLD_CUPS;
 SELECT *FROM WORLD_CUP_MATCHES;
-- -------------------------------------------------------
SELECT *FROM WORLD_CUP_MATCHES AS T1
           INNER JOIN WORLD_CUPS AS T2
				 ON T1.YEAR=T2.YEAR;
-- ---------------------------------------------------------
# 1. COUNT TOTAL NUMBER OF WINNER BY COUNTRY AND ARRANGE IN DESCENDING ORDER 

SELECT WINNER,COUNT(*) AS NO_OF_TIME FROM WORLD_CUP_MATCHES AS T1 INNER JOIN WORLD_CUPS AS T2
								ON T1.YEAR = T2.YEAR
                                  GROUP BY WINNER ORDER BY NO_OF_TIME DESC;

SELECT WINNER,COUNT(*) AS TIMES_WINNER FROM WORLD_CUPS
         GROUP BY WINNER ORDER BY TIMES_WINNER DESC;
         
SELECT *FROM WORLD_CUPS;
SELECT *FROM WORLD_CUP_MATCHES;

# SHOW THE MAXIMUM GOALS BY EACH WINNER
 SELECT WINNER,MAX('GOALS SCORED') AS MAX_GOALS FROM WORLD_CUPS
               GROUP BY WINNER;
               
# SHOW THE TOP 5 SUM OF HOME GOALS BY WINNER
SELECT WINNER,SUM('HOME GOALS') AS HOME_GOALS 
							FROM WORLD_CUP_MATCHES AS T1 INNER JOIN WORLD_CUPS AS T2
                             ON T1.YEAR= T2.YEAR
                                GROUP BY WINNER ORDER BY HOME_GOALS DESC LIMIT 5;

# SHOW TOTAL NUMBER OF HOST TEAM WINNER
 SELECT COUNT(DISTINCT WINNER) AS WINNER FROM WORLD_CUP_MATCHES AS T1 LEFT JOIN WORLD_CUPS AS T2
                               ON T1.YEAR = T2.YEAR WHERE 'HOST TEAM'="TRUE";

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRILLICA;
SELECT *FROM COVID_DATA;

# FIND THE TOTAL NUMBER OF CONFIRMED CASE IN JANUARY OF EACH WHO REGION
SELECT 'WHO REGION',SUM(CONFIRMED) FROM COVID_DATA WHERE MONTHNAME(DATE) ="JANUARY" GROUP BY 'WHO REGION';
SELECT 'WHO REGION',SUM(CONFIRMED) FROM COVID_DATA WHERE monthname(DATE)="JANUARY" GROUP BY 'WHO REGION';
# FIND THE TOTAL NUMBER OF CONFIRMED CASE IN APRIL BY EACH WHO REGION 
SELECT 'WHO REGION',SUM(CONFIRMED) FROM COVID_DATA WHERE MONTH(DATE) =4 GROUP BY 'WHO REGION';
SELECT `WHO REGION`,SUM(CONFIRMED) FROM COVID_DATA WHERE monthname(DATE)="APRIL" GROUP BY `WHO REGION`;

# SHOW THE AVERAGE ACTIVE CASE BY COUNTRY IN SOUTH-EAST-ASIA
SELECT COUNTRY,AVG(ACTIVE) AS ACT FROM COVID_DATA WHERE `WHO REGION` ="SOUTH-EAST ASIA"
GROUP BY COUNTRY ORDER BY ACT DESC;
 
 -- -----------------------------------------------------------------------------------------
 
#  POPULATION DATA:- WHOLE DATA SET THATS COLLECTED FROM DATABASE.  
# SAMPLE:- SUBSET OF POPULATION DATA. 
 
 
# VIEW:- IT IS USED TO CREATE A VIRTUAL TABLE FROM THE DATASET.
#        IT IS USED FIND THE INSIGHTS FROM THE POPULATION DATASET.
#---------------------------------------------------------------------------------------

USE BRILLICA;
SELECT *FROM EMP;

# WRITE A QUERY TO FIND THE EMPLOYEE WHOSE DEPARTMENT IS DATA ANALYST, DATA SCIENTIST AND CITY IS NOIDA AND PATNA

# CREATING VIEW

CREATE VIEW SAMPLE AS(
SELECT *FROM EMP WHERE DEPARTMENT IN (" DATA SCIENTIST","DATA ANALYST")
AND CITY IN ("NOIDA","PATNA"));

SELECT *FROM SAMPLE;



USE BRILLICA;

# SHOW THE DATA WHOSE DEPARTMENT IS DA

CREATE VIEW S2 AS(
SELECT EMP_NAME,SALARY,FIRST.DEP_ID,DEPARTMENT
FROM FIRST LEFT JOIN SECOND ON FIRST.DEP_ID=SECOND.DEP_ID);
SELECT *FROM S2 WHERE DEPARTMENT = "DA";



# WRITE A QUERY TO FIND THE MAXIMUM ACTIVE CASE IN MARCH AND APRIL BY WHO REGION

SELECT 'WHO REGION',MAX(ACTIVE) AS MARCH FROM COVID_DATA
               WHERE MONTH(DATE) = 3
                      GROUP BY 'WHO REGION';
                      
SELECT 'WHO REGION',MAX(ACTIVE) AS APRIL FROM COVID_DATA
               WHERE MONTH(DATE) =4
                     GROUP BY 'WHO REGION';
                     
CREATE VIEW MA AS (
SELECT T1.'WHO REGION' ,MARCH,APRIL FROM(                     
SELECT 'WHO REGION',MAX(ACTIVE) AS MARCH FROM COVID_DATA
               WHERE MONTH(DATE) = 3
                      GROUP BY 'WHO REGION') AS T1
                           INNER JOIN 
                           
(SELECT 'WHO REGION',MAX(ACTIVE) AS APRIL FROM COVID_DATA
               WHERE MONTH(DATE) = 4
                      GROUP BY 'WHO REGION') AS T2
                      ON  T1.'WHO REGION' = T2.'WHO REGION');

# AND SHOW THE GREATER THAN AVG ACTIVE CASE OF MARCH

-- -------------------------------------------------------------------------------------------------------------------------------------------------------

use brillica;
select *from covid_data;

# VIEW :- VIEW ARE USED TO CREATE VIRTUAL TABLE. 

CREATE VIEW COVID19 AS (
SELECT COUNTRY,SUM(ACTIVE) AS ACTIVE,
               SUM(CONFIRMED) AS CONFIRMED,
			   SUM(DEATHS) AS DEATHS,
               SUM(RECOVERED) AS RECOVERED
                 FROM COVID_DATA GROUP BY COUNTRY);
                 

SELECT *FROM COVID19 WHERE COUNTRY = "INDIA";

# 1. SHOW THE NAME OF COUNTRY WHOSE CONFIRMED CASE IS MAXIMUM TO OTHER.


SELECT COUNTRY FROM COVID19
             ORDER BY CONFIRMED DESC
              LIMIT 1;


# 2. SHOW THE ALL COLUMN WHOSE ACTIVE CASE IS GREATER THAN AVERAGE ACTIVE CASE.
SELECT AVG(ACTIVE) FROM COVID19;

SELECT *FROM COVID19 WHERE ACTIVE>(SELECT AVG(ACTIVE) FROM COVID19);

-- ----------------------------------------------------------------------------------------------------------------
 --                                   STORE PROCEDURE
# CREATED A STORE PROCEDURE

DELIMITER //
CREATE PROCEDURE PK()
BEGIN
SELECT * FROM EMP WHERE CITY = "NOIDA";
END// 
DELIMITER ;

-- -----------------------------------------------------------------------------------

-- HOW TO RUN THE PROCEDURE

CALL PK;


DELIMITER $$
CREATE PROCEDURE AB(IN A TEXT)
BEGIN
SELECT *FROM EMP WHERE CITY =A;
END $$
DELIMITER ;

CALL AB("PATNA");
CALL AB("NOIDA");

# CREATE A PROCEDURE NAME FILTER2 AND FILTER THE DEPARTMENT AND GREATER THAN SALARY. 

DELIMITER //
CREATE PROCEDURE FILTER1 (IN A VARCHAR(50), B INT)
BEGIN
SELECT  * FROM EMP WHERE DEPARTMENT = A AND SALARY > B;
END//
DELIMITER ;

CALL FILTER1("DATA ANALYST",50000);

DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
SELECT * FROM EMP WHERE CITY = "NOIDA";
SELECT * FROM EMP WHERE CITY = "PATNA";
END//
DELIMITER ;

CALL ABC();

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRILLICA;

SELECT *FROM MARKSHEET;

# 1. COUNT TOTAL NUMBER OF STUDENT IN EACH STATE. 
SELECT COUNT(*) AS TOTAL_STUDENT
	 FROM MARKSHEET GROUP BY ADDRESS;

# 2. SHOW THE AVERAGE TOTAL_MARKS BY STATE.
 
SELECT ADDRESS,ROUND(AVG(TOTAL_MARKS)) AS TOTALMARKS FROM MARKSHEET GROUP BY STATE;


# 3. COUNT TOTAL NUMBER OF STUDENT FROM DELHI. 
SELECT COUNT(*) AS TOTAL_STUDENT
         FROM MARKSHEET 

# 4. SHOW THE AVERAGE AGE OF GIRL IN EACH STATE IN DESCENDING ORDER. 
SELECT STATE,AVG(AGE) AS AVG_AGE FROM MARKSHEET
  WHERE GENDER = "GIRL" GROUP BY STATE ORDER BY AVG_AGE DESC;
# 5. SHOW THE MAXIMUM MARKS IN OF STUDENT WITH MARKS IN EACH STATE. 
# 6. SHOW THE MAXIMUM MARKS OF STUDENT BY GENDER AND STATE. 



-- --------------------------------------

SELECT *FROM MARKSHEET;

 
SELECT MAX(TOTAL_MARKS) AS MAXIMUM_MARKS FROM MARKSHEET WHERE STATE = "BIHAR";

DELIMITER //
CREATE PROCEDURE CITY_NAME(IN A TEXT)
BEGIN
SELECT MAX(MARKS) AS MAXIMUM_MARKS FROM MARKSHEET WHERE ADDRESS = A;
END //
DELIMITER ;
DROP procedure CITY_NAME;
CALL CITY_NAME("DELHI");

DELIMITER // 
CREATE PROCEDURE CITY(IN X TEXT)
BEGIN
SELECT STATE,MAX(TOTAL_MARKS) AS MAX_MARKS FROM MARKSHEET
 GROUP BY STATE HAVING STATE = X;
 END //
 DELIMITER ;
 
 CALL CITY("BIHAR");

# WINDOWS FUNCTION :-  WINDOW FUNCTION APPPLIED AGGREGATE FUNCTION AND RANKING FUNCTION OVER A PARTICULAR WINDOW(SET OF ROWS)
# OVER() :- OVER CLOUSE USED WITH WINDOW FUNCTION TO DEFINE THE WINDOW. 
# PARTITION BY :- IT IS USED TO DIVIDE THE SET OF ROWS. 
# ORDER BY :- ITS SORT THE ROWS ACCORDING TO USER 
# ROW_NUMBER :- ASSINGS A UNIQE INTEGER VALUE TO EACH ROW WITHIN A WINDOW. 

SELECT  *,ROW_NUMBER() OVER(ORDER BY MARKS) AS RNK
FROM MARKSHEET;

# SHOW THE RANK OF STUDENT BY EACH STATE WITH STUDENT DETAILS

SELECT *,ROW_NUMBER() OVER(PARTITION BY STATE ORDER BY MARKS) AS RNK FROM MARKSHEET;

# 1. SHOW THE RANK OF THE STUDENT BASE OF AGE ( MINIMUM TO MAXIMUM)
SELECT *,ROW_NUMBER() OVER( ORDER BY AGE ) AS AGE FROM MARKSHEET;
# 2. SHOW THE RANK OF THE STUDENT IN BIHAR ONLY BASE OF TOTAL MARKS
SELECT *,ROW_NUMBER() OVER(PARTITION BY STATE ORDER BY MARKS DESC) AS RNK FROM MARKSHEET WHERE STATE = "BIHAR";









 



















































































 















